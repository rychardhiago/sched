<?phprequire_once('dbconfig.php');class agendamentos{	private $conn;		public function __construct()	{		$database = new Database();		$db = $database->dbConnection();		$this->conn = $db;    }		public function runQuery($sql)	{		$stmt = $this->conn->prepare($sql);		return $stmt;	}		public function redirect($url){		header("Location: $url");	}    public function editarservicos($valor){        try {            $agendamentoid = $valor['agendamentoid'];            $servicos = $valor['servicosE'];            $stmt = $this->conn->prepare("SELECT SUM(preco) preco FROM `servicos` WHERE servicoid in(" . $servicos . ")");            $stmt->execute();            $s = $stmt->fetch();            $precototal = $s['preco'];            $stmt = $this->conn->prepare("UPDATE agendamentos SET servicos = :servicos, precototal = :precototal WHERE agendamentoid = :agendamentoid");            $stmt->bindparam(":agendamentoid", $agendamentoid);            $stmt->bindparam(":servicos", $servicos);            $stmt->bindparam(":precototal", $precototal);            $stmt->execute();            return "0";        }        catch(PDOException $e){            echo $e->getMessage();        }    }    public function register($valor){        try {            $profissionaiid = $valor["profissionaiid"];            $servicos = $valor["servicos"];            $obsemp = $valor['obsemp'];            $nomecliente = $valor['nomecliente'];            $profausente = $valor['profausente'];            $datainicio = $valor['datainicio'];            $empresaid = $_SESSION['empresaid'];            $clienteid = $valor['clienteid'];            $interno = 'S';            $datafim = $valor['datafim'];            $stmt = $this->conn->prepare("SELECT SUM(preco) preco, SUM(TIME_TO_SEC(tempo)) tempo FROM `servicos` WHERE servicoid in(" . $servicos . ")");            $stmt->execute();            $s = $stmt->fetch();            $precototal = $s['preco'];            $tempototal = $s['tempo'];            if (empty($datafim)){                $newdate = strtotime($datainicio) + $tempototal - 60;//retirando 1 min                $datafim = date('Y-m-d H:i:s', $newdate);            }            else{                $newdate = strtotime($datafim) - 60;//retirando 1 min                $datafim = date('Y-m-d H:i:s', $newdate);            }            if($nomecliente=="")	{                return "preencha o nome!";            }            else if($servicos=="")	{                return "selecione pelo menos 1 serviço!";            }            else {                /**                 * Validação do dia da semana                 */                $stmt = $this->conn->prepare("SELECT diassemana from empresas where empresaid = :empresaid ");                $stmt->bindparam(":empresaid", $empresaid);                $stmt->execute();                $dias = $stmt->fetch();                $dianaopermitido = true;                $diassemana = explode(',',$dias['diassemana']);                $dia = date('w',strtotime($datainicio))+1;                for($i=0;$i<count($diassemana);$i++){                    if($dia == $diassemana[$i]){                        $dianaopermitido = false;                        break;                    }                }                if($dianaopermitido){                    return " #SCD002 - este estabelecimento não funciona para o dia escolhido! Favor atualize a página e verifque.";                }                /**                 * Validação das datas e horários                 */                $sql   = "SELECT count(agendamentos.agendamentoid) contador ";                $sql  .= "FROM agendamentos, profissionais, empresas ";                $sql  .= "WHERE agendamentos.profissionaiid = profissionais.profissionaiid and agendamentos.empresaid = empresas.empresaid ";                $sql  .= "and ((datainicio BETWEEN '".$datainicio."' and '".$datafim."' or datafim BETWEEN '".$datainicio."' and '".$datafim."') or ";                $sql  .= "(datainicio <= '".$datainicio."' and datafim >='".$datafim."')) ";                $sql  .= "and agendamentos.profissionaiid = ".$profissionaiid." and agendamentos.empresaid = ".$empresaid." and agendamentos.cancelado = 'N'";                $stmt = $this->runQuery($sql);                $stmt->execute();                $agend = $stmt->fetch();                if($agend['contador'] > 0 ) {                    return " #SCD001 - este horário já esta reservado! Favor atualize a página e verifque a agenda.".$datainicio;                }                $stmt = $this->conn->prepare("INSERT INTO agendamentos(profissionaiid,servicos,obsemp,nomecliente, profausente, datainicio, empresaid, clienteid, interno, precototal, tempototal, datafim ) VALUES(:profissionaiid, :servicos, :obsemp, :nomecliente, :profausente, :datainicio, :empresaid, :clienteid, :interno, :precototal, SEC_TO_TIME(:tempototal), :datafim)");                $stmt->bindparam(":profissionaiid", $profissionaiid);                $stmt->bindparam(":servicos", $servicos);                $stmt->bindparam(":obsemp", $obsemp);                $stmt->bindparam(":nomecliente", $nomecliente);                $stmt->bindparam(":profausente", $profausente);                $stmt->bindparam(":datainicio", $datainicio);                $stmt->bindparam(":empresaid", $empresaid);                $stmt->bindparam(":clienteid", $clienteid);                $stmt->bindparam(":interno", $interno);                $stmt->bindparam(":precototal", $precototal);                $stmt->bindparam(":tempototal", $tempototal);                $stmt->bindparam(":datafim", $datafim);                $stmt->execute();                return "0";            }        }        catch(PDOException $e){            echo $e->getMessage();        }    }    public function cancelar($valor){        try {            $cancelado = $valor['cancelado'];            $obscancel = $valor['obscancel'];            $compareceu = $valor['compareceu'];            $agendamentoid = $valor['agendamentoid'];            $stmt = $this->conn->prepare("UPDATE agendamentos SET cancelado = :cancelado, obscancel = :obscancel, compareceu = :compareceu WHERE agendamentoid = :agendamentoid");            $stmt->bindparam(":agendamentoid", $agendamentoid);            $stmt->bindparam(":cancelado", $cancelado);            $stmt->bindparam(":obscancel", $obscancel);            $stmt->bindparam(":compareceu", $compareceu);            $stmt->execute();            return "0";        }        catch(PDOException $e){            echo $e->getMessage();        }    }    public function bloquear($valor){        try {            $clienteid = $valor['clienteid'];            $observacao = $valor['observacao'];            $profissionaiid = $_SESSION['user_session'];            $empresaid = $_SESSION['empresaid'];            $automatico = 'N';            $stmt = $this->conn->prepare("INSERT INTO bloqueiocliemp(clienteid, observacao, empresaid, profissionaiid, automatico) VALUES (:clienteid, :observacao, :empresaid, :profissionaiid, :automatico)");            $stmt->bindparam(":clienteid", $clienteid);            $stmt->bindparam(":observacao", $observacao);            $stmt->bindparam(":profissionaiid", $profissionaiid);            $stmt->bindparam(":empresaid", $empresaid);            $stmt->bindParam(":automatico", $automatico);            $stmt->execute();            return "0";        }        catch(PDOException $e){            echo $e->getMessage();        }    }}?>